
#+title: Supreme Sexp System - SSS
#+author: Josep Bigorra
#+email: jjbigorra@gmail.com
#+options: num:nil


* Supreme Sexp System - SSS

A Lisp machine adventure, where GNU and Lisp are celebrated, GNU is love, Emacs and StumpWM are life. 

Find the divine sayings, and the destined configurations, all my Guix, Scheme, StumpWM, Common Lisp and Emacs Lisp configurations here for learning you a fully Lisp machine with GNU/Linux for a great good.

Note: Screenshot below might be outdated and no longer representative of the current, everchanging state of these "dotfiles".
#+begin_html
<img src="./resources/screenshots/17-10-2024.png"/>
#+end_html

These are my configuration files, which also explain a lot about the tooling I use and enjoy, and can teach you a thing or two.

If you like my work, please support me by [[https://bmc.link/jjbigorra][buying me a cup of coffee â˜•]] so I can continue with a lot of motivation.

This is the set of files that powers my day-to-day computing experience, so do not track my dotfiles (rolling, unstable, and untested), but feel free to use them and take inspiration from them or fork.

#+begin_html
<div>
<img src="https://img.shields.io/badge/GNU%20Emacs-7F5AB6?logo=gnuemacs&logoColor=fff&style=plastic" alt="GNU Emacs"/>
</div>
#+end_html

In some ways this is a laboratory of experimentation for my computing environment. What I do with any other program that forms part of my dotfiles is only meant to work for me. As such, I may introduce breaking changes without prior notice.

This is all to say that you understand the risks associated with tracking an ever-changing project that does not enjoy widespread testing and whose target audience is only me. If you are fine with that and are willing to assume responsibility for any possible breakage, then please feel welcome to follow along. You can always open an issue here or contribute any fixes, if you will.


* Words of Advice

Learning Lisps is really going down a rabbit hole, but trust me, you will come out with a better understanding of programming as a whole out the other end.

This configuration is heavily biased towards containing a ~joe~ user who also acts as administrator for most of the time.

Your mileage may vary (YMMV).

Feel free to fork this, under the terms of the GNU GPL v3 or newer.

As your user ~joe~ run commands from the Makefile, like ~make fr~ or make ~sr~.

The system and home folders of users are managed independently of each other, in quite a loosely coupled manner.

It's possible you need to some manual installations, and temporary workarounds, in order to install ~sss~ on a brand-new Guix installation. For example including ~nonguix~ in your channels (=~/.config/guix/channels.scm=). You might also need to install tools like Git and GNU make temporarily.

#+begin_src  scheme
  (cons* (channel
        (name 'nonguix)
        (url "https://gitlab.com/nonguix/nonguix")
        (introduction
         (make-channel-introduction
          "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
          (openpgp-fingerprint
           "2A39 3FFF 68F4 EF7A 3D29 12AF 6F51 20A0 22FB B2D5"))))
       %default-channels)

#+end_src

It is *REQUIRED* to include a ~per-host.scm~ in the root of this project, which is excluded from Git, and will determine certain settings for your own machine.

#+begin_src  scheme
  (define sss-filesystems
    (list (file-system
           (device "/dev/nvme0n1p3")
           (mount-point "/")
           (type "ext4"))
          (file-system
           (device "/dev/nvme0n1p1")
           (mount-point "/boot/efi")
           (type "vfat"))))
#+end_src
